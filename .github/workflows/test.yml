on:
  workflow_call:
    inputs:
      build-tool:
        type: string
        required: false
        default: poetry
      python-version:
        required: true
        type: string
      debian-version:
        required: false
        type: string
        default: bookworm
      submit-coverage:
        required: false
        type: boolean
        default: false
      tests-location:
        required: false
        type: string
        default: src/
      tests-selector:
        required: false
        type: string
    secrets:
      ENVIRONMENT_VARIABLES:
        required: false
      CODECOV_TOKEN:
        required: false

jobs:
  test:
    runs-on: ubuntu-24.04
    container: python:${{ inputs.python-version }}-slim-${{ inputs.debian-version }}
    steps:
      - run: |
          pip install 'pipx==1.7.*'
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
      - run: pipx install poetry==1.8.4
        if: inputs.build-tool == 'poetry'
      - run: pipx install uv==0.5.6
        if: inputs.build-tool == 'uv'
      - uses: actions/checkout@v4
      - run: poetry install --all-extras --no-interaction --no-ansi
        if: inputs.build-tool == 'poetry'
      - run: uv sync
        if: inputs.build-tool == 'uv'
      - name: Export secrets as environment
        env:
          INPUT_VARS: ${{ secrets.ENVIRONMENT_VARIABLES }}
        shell: bash
        run: |
          if [ -z "$INPUT_VARS" ]
          then
            echo "No env vars given."
            exit 0
          fi
          
          while IFS= read -r line
          do
            if [ -n "$line" ]
            then
              echo "::add-mask::$line"
              value=$(echo "$line" | cut -d"=" -f2-)
              echo "::add-mask::$value"
          
              echo "$line" >> "$GITHUB_ENV"
            fi
          done <<< "$INPUT_VARS"
      - name: Run tests
        run: ${{ inputs.build-tool }} run pytest ${{ inputs.tests-selector && format('-m "{0}"', inputs.tests-selector) || '' }} ${{ inputs.submit-coverage && '--cov' || '' }} ${{ inputs.tests-location }}
      - name: Convert Python coverage file format to XML
        if: inputs.submit-coverage
        run: ${{ inputs.build-tool }} run coverage xml
      - name: Store coverage artifact
        if: inputs.submit-coverage
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage
          path: ./coverage.xml
          overwrite: true

  upload-coverage-report:
    runs-on: ubuntu-24.04
    needs: [ test ]
    if: inputs.submit-coverage
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: test-coverage
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
